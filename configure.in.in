dnl KDE_PKG_CHECK_MODULES(GSTUFF, gtk+-2.0 >= 1.3 glib = 1.3.4, action-if, action-not)
dnl defines GSTUFF_LIBS, GSTUFF_CFLAGS, see pkg-config man page
dnl also defines GSTUFF_PKG_ERRORS on error
AC_DEFUN([KDE_PKG_CHECK_MODULES], [
  succeeded=no

  if test -z "$PKG_CONFIG"; then
    AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
  fi

  if test "$PKG_CONFIG" != "no" ; then
     PKG_CONFIG_MIN_VERSION=0.9.0
     if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
        AC_MSG_CHECKING(for $2)

        if $PKG_CONFIG --exists "$2" ; then
            AC_MSG_RESULT(yes)
            succeeded=yes

            AC_MSG_CHECKING($1_CFLAGS)
            $1_CFLAGS=`$PKG_CONFIG --cflags "$2"`
            AC_MSG_RESULT($$1_CFLAGS)

            AC_MSG_CHECKING($1_LIBS)
            $1_LIBS=`$PKG_CONFIG --libs "$2"`
            AC_MSG_RESULT($$1_LIBS)
        else
            $1_CFLAGS=""
            $1_LIBS=""
            ## If we have a custom action on failure, don't print errors, but
            ## do set a variable so people can do so.
            $1_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "$2"`
            ifelse([$4], ,echo $$1_PKG_ERRORS,)
        fi

        AC_SUBST($1_CFLAGS)
        AC_SUBST($1_LIBS)
     else
        echo "*** Your version of pkg-config is too old. You need version $PKG_CONFIG_MIN_VERSION or newer."
        echo "*** See http://www.freedesktop.org/software/pkgconfig"
     fi
  fi
  if test $succeeded = yes; then
     ifelse([$3], , :, [$3])
  else
     ifelse([$4], , AC_MSG_WARN([Library requirements ($2) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them.]), [$4])
  fi
])



###############################################################################
# BEGIN PKG-CONFIG CHECK
###############################################################################

AC_ARG_VAR(PKGCONFIGFOUND, [Path to pkg-config])
AC_CHECK_PROG(PKGCONFIGFOUND, pkg-config,[yes])

###############################################################################
# END PKG-CONFIG CHECK
###############################################################################



###############################################################################
# BEGIN KDEMULTIMEDIA CHECK
###############################################################################

KDE_CHECK_HEADER(arts/artsmodules.h, have_kdemm=yes, have_kdemm=no)

AM_CONDITIONAL(with_arts, [test x$have_kdemm = xyes -a x$build_arts = xyes])

if test x$build_arts = xyes -a x$have_kdemm = xyes; then
    AC_DEFINE(HAVE_ARTS, 1, [have aRts and kdemultimedia])
    arts_libs="-lqtmcop -lkmedia2_idl -lartsflow -lsoundserver_idl -lartskde -lartsgui -lartsgui_kde -lartsmodules"
fi

AC_SUBST(arts_libs)

###############################################################################
# END KDEMULTIMEDIA CHECK
###############################################################################



###############################################################################
# BEGIN TAGLIB CHECK
###############################################################################

TAGLIB_REQ_VERSION="0.95";
TAGLIB_URL="http://ktown.kde.org/~wheeler/taglib/";
AC_DEFUN([VERSION_TO_NUMBER], [`$1 | awk 'BEGIN { FS = "."; } { printf "%d",  ([$]1* 1000 + [$]2) * 1000 + [$]3;}'`])

AC_PATH_PROG(TAGLIB_CONFIG, taglib-config, no)

if test "x$TAGLIB_CONFIG" = "xno" ; then
    amarok_error_notaglib=yes
    DO_NOT_COMPILE="$DO_NOT_COMPILE amarok"
    no_amarok=yes
else
    AC_DEFINE(HAVE_TAGLIB, 1, [have TagLib])
    taglib_includes=[`$TAGLIB_CONFIG --cflags`]
    taglib_libs=[`$TAGLIB_CONFIG --libs`]
    taglib_version=[`$TAGLIB_CONFIG --version`]

    if test VERSION_TO_NUMBER(echo $taglib_version) -lt VERSION_TO_NUMBER(echo $TAGLIB_REQ_VERSION); then
        amarok_error_taglibold=yes
        DO_NOT_COMPILE="$DO_NOT_COMPILE amarok"
        no_amarok=yes
    fi
fi

AC_SUBST(taglib_includes)
AC_SUBST(taglib_libs)

###############################################################################
# END TAGLIB CHECK
###############################################################################



###############################################################################
# BEGIN GSTREAMER CHECK
###############################################################################

AC_ARG_WITH(gstreamer,
    AC_HELP_STRING([--without-gstreamer],[build without GStreamer [default=yes]]),
    [build_gstreamer=$withval],
    [build_gstreamer=yes]
)

if test "$build_gstreamer" != "no"; then
    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for GStreamer
        dnl Now we're ready to ask for gstreamer libs and cflags
        dnl And we can also ask for the right version of gstreamer
        have_gst=no

        GST_MAJORMINOR=0.8
        GST_REQ=0.8.1

        KDE_PKG_CHECK_MODULES(GST, gstreamer-$GST_MAJORMINOR >= $GST_REQ,
            have_gst=yes,have_gst=no)

        KDE_PKG_CHECK_MODULES(GST_PLUGINS, gstreamer-plugins-$GST_MAJORMINOR >= $GST_REQ, \
            have_gst_plugins=yes,have_gst_plugins=no)

        dnl Give error if we don't have gstreamer
        if test "x$have_gst" = "xno"; then
            LIB_GST=""
            CFLAGS_GST=""
        else
            LIB_GST=$GST_LIBS
            CFLAGS_GST=$GST_CFLAGS
            AC_SUBST(LIB_GST)
            AC_SUBST(CFLAGS_GST)
            AC_SUBST(GST_MAJORMINOR)
            AC_DEFINE(HAVE_GSTREAMER, 1, [have GStreamer])
        fi
    fi
fi

AM_CONDITIONAL(with_gst, [test x$have_gst = xyes])

###############################################################################
# END GSTREAMER CHECK
###############################################################################



###############################################################################
# BEGIN NMM CHECK
###############################################################################

AC_ARG_WITH(nmm,
    AC_HELP_STRING([--with-nmm],[build the amaroK NMM-engine [default=no]]),
    [build_nmm=$withval],
    [build_nmm=no]
)

AC_ARG_WITH(nmm,
    AC_HELP_STRING([--with-nmm-includes],[where the libraries for NMM are installed [default=/usr/local/include]]),
    [nmm_cflags=$withval],
    [nmm_cflags=/usr/local/include]
)

if test "$build_nmm" != "no"; then

    #currently NMM libs must by in LD_PATH
    CFLAGS_NMM="-I$nmm_cflags"
    AC_DEFINE(HAVE_NMM, 1, [have NMM])

else

    #no warning, what's the point?
    CFLAGS_NMM=""

fi

AM_CONDITIONAL(with_nmm, test x$build_nmm = xyes)
AC_SUBST(CFLAGS_NMM)

###############################################################################
# END NMM CHECK
###############################################################################



###############################################################################
# BEGIN QT OPENGL CHECK
###############################################################################

AC_ARG_WITH(opengl,
    AC_HELP_STRING([--without-opengl],[build without OpenGL [default=yes]]),
    [build_opengl=$withval],
    [build_opengl=yes]
)

if test "$build_opengl" != "no"; then
    AC_MSG_CHECKING(for Qt with OpenGL support)
    AC_CACHE_VAL(ac_cv_kde_qt_has_opengl,
    [
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS

    save_CXXFLAGS="$CXXFLAGS"
    save_LIBS="$LIBS"
    save_LDFLAGS="$LDFLAGS"

    CXXFLAGS="$CXXFLAGS -I$qt_incdir $all_includes"
    LDFLAGS="$LDFLAGS -L$qt_libdir $all_libraries $USER_LDFLAGS $KDE_MT_LDFLAGS"
    LIBS="$LIBS $LIBQT $KDE_MT_LIBS"

    AC_TRY_LINK([
    #include <qgl.h>
    ],
    [
    (void)new QGLWidget((QWidget*)0, "qgl");
    ],
    ac_cv_kde_qt_has_opengl=yes,
    ac_cv_kde_qt_has_opengl=no)

    CXXFLAGS="$save_CXXFLAGS"
    LIBS="$save_LIBS"
    LDFLAGS="$save_LDFLAGS"
    AC_LANG_RESTORE
    ])
    AC_MSG_RESULT($ac_cv_kde_qt_has_opengl)

    if test x$ac_cv_kde_qt_has_opengl = xyes; then
    AC_DEFINE(HAVE_QGLWIDGET, 1, [have Qt with OpenGL support])
    gl_libs="-lGL"
    else
    gl_libs=""
    fi

    AC_SUBST(gl_libs)
fi

###############################################################################
# END QT OPENGL CHECK
###############################################################################



###############################################################################
# BEGIN SQLITE CHECK
###############################################################################
LIB_SQLITE=""

AC_ARG_WITH(included-sqlite,
    AC_HELP_STRING([--without-included-sqlite],[don't use the included sqlite sources [default=yes]]),
    [included_sqlite=$withval],
    [included_sqlite=yes]
)

if test x$included_sqlite = xno; then
    if test x$PKGCONFIGFOUND = xyes; then
        KDE_PKG_CHECK_MODULES(SQLITE, sqlite >= 2.8, have_sqlite=yes,have_sqlite=no)

        if test x$have_sqlite = xyes; then
            ## AC_DEFINE(HAVE_SQLITE, 1, [have SQLite database library])
            LIB_SQLITE=$SQLITE_LIBS
        else
            # We don't support not having sqlite anymore
            DO_NOT_COMPILE="$DO_NOT_COMPILE amarok"
            no_amarok=yes
        fi
    fi
fi

AC_SUBST(LIB_SQLITE)
AM_CONDITIONAL(with_included_sqlite, [test x$included_sqlite = xyes])


###############################################################################
# END SQLITE CHECK
###############################################################################



###############################################################################
# BEGIN XMMS CHECK
###############################################################################

AC_CHECK_PROG(XMMS_CONFIG, xmms-config, yes)

if test x$XMMS_CONFIG = xyes; then
    xmms_plugin_path=`xmms-config --visualization-plugin-dir`
    xmms_cflags=`xmms-config --cflags`
    xmms_libs=`xmms-config --libs`
fi

AC_DEFINE_UNQUOTED(XMMS_PLUGIN_PATH, "$xmms_plugin_path", [Define the path to XMMS plugins])
AC_SUBST(xmms_cflags)
AC_SUBST(xmms_libs)

## XMMSwrapper depends on gtk/gdk headers
AC_CHECK_PROG(GTK_CONFIG, gtk-config, yes)

if test x$XMMS_CONFIG = xyes -a x$GTK_CONFIG = xyes; then
    gtk_cflags=`gtk-config --cflags`
    gtk_libs=`gtk-config --libs`
    build_xmmswrapper=yes
    AC_DEFINE(HAVE_XMMS, 1, [have XMMS])
else
    build_xmmswrapper=no
fi

AC_SUBST(gtk_cflags)
AC_SUBST(gtk_libs)

AM_CONDITIONAL(with_xmmswrapper, test x$build_xmmswrapper = xyes )

###############################################################################
# END XMMS CHECK
###############################################################################



###############################################################################
# BEGIN DO_NOT_COMPILE CHECK
###############################################################################

if test x$have_kdemm != xyes -a x$have_gst != xyes -a x$build_nmm != xyes; then
    DO_NOT_COMPILE="$DO_NOT_COMPILE amarok"
    no_engine=yes
fi

###############################################################################
# END DO_NOT_COMPILE CHECK
###############################################################################


## needed for SQLite
KDE_CHECK_TYPES


